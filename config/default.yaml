
    "port": 9001 # the port the proxy server will expose
    
    "target": "http://localhost:9000" # the local target for JSON data that the proxy server will interface to 
    "ssl_cert_file": "/etc/ssl/certs/ssl-cert-snakeoil.pem" # paths to SSL certificates on the local server
    "ssl_key_file": "/etc/ssl/private/ssl-cert-snakeoil.key" # paths to SSL certificates on the local server
    "ssl_secure": false # true/false, if you want to verify the SSL Certs
    "changeOrigin": false # true/false, changes the origin of the host header to the target URL
    
    # asterisk to allow unretricted access OR a list of regular expressions matching allowed origins
    # example of a list [ /^https?:\/\/geojson\.io/, /https?:\/\/example\.com/ ]
    "corsAllow": "*" 
    
    # List of JSON fields that can be mapped to GeoJSON in order of priority. The search stops when a matching field is found
    # Critical keys are as follow:
    # "geojson" for a native geojson field eg a PostGIS geometry and the acceptable GeoJSON "types" it can contain
    # "point_pair" for two long/lat fields which will make a GeoJSON Point
    # "coordinates" which are array fields with the coordinates of the single GeoJSON "type" supplied
    "geoFields":  
        - { "geojson": "location", "types": [ "Point" ] }
        - { "geojson": "borders", "types": [ "Polygon", "MultiPolygon" ] }
        - { "point_pair": [ "lng", "lat" ] } 
        - { "point_pair": [ "longitude", "latitude" ] }
        - { "coordinates": "point", "type": "Point" }
        - { "coordinates": "polygon", "type": "Polygon" }
        - { "coordinates": "multipolygon", "type": "MultiPolygon" }
  

